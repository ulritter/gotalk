package main

import (
	"net"
	"runtime"

	language "github.com/moemoe89/go-localization"
)

var lang *language.Config


var locale string

const RAWFILE = "https://raw.githubusercontent.com/ulritter/gotalk/main/language.json"
const LANGfILE = "./language.json"

const CMD_PREFIX = '/'
const CMD_EXIT = "exit"
const CMD_CHANGENICK = "nick"
const CMD_LISTUSERS = "list"
const CMD_ERROR = "error"
const CMD_HELP = "help"
const CMD_HELP1 = "?"
const CMD_ESCAPE_CHAR = '\f'

const CODE_NOCMD = 0
const CODE_EXIT = 1
const CODE_DONOTHING = 2

const BUFSIZE = 16384

const MESSAGEWIDTH = 600
const MESSAGEHEIGHT = 400
const STATUSWIDTH = 424
const STATUSHEIGHT = 440

//
// hard-wired tls key / certificate for test purposes
// command for serverKey: openssl ecparam -genkey -name prime256v1 -out server.key
// command for root Cert: openssl req -new -x509 -key server.key -out server.pem -days 3650
//

const serverKey = `-----BEGIN EC PARAMETERS-----
-----END EC PARAMETERS-----
-----BEGIN EC PRIVATE KEY-----
-----END EC PRIVATE KEY-----
`
const rootCert = `-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
`

type MessageEvent struct {
	msg string
}

type UserJoinedEvent struct {
}

type UserLeftEvent struct {
	user *User
	msg  string
}

type UserChangedNickEvent struct {
	user *User
	nick string
}

type ListUsersEvent struct {
	user *User
}

type ClientInput struct {
	user  *User
	event interface{}
}

type User struct {
	name       string
	session    *Session
	timejoined string
}

type Session struct {
	conn net.Conn
}

type WhoAmI struct {
	server bool
	addr   string
	port   string
	nick   string
}

type Room struct {
	users []*User
}

type Newline struct {
	nl string
}

func (s *Session) WriteString(str string) error {
	_, err := s.conn.Write([]byte(str))
	return err
}
func (s *Session) WriteStatus(str string) error {
	str = string(CMD_ESCAPE_CHAR) + str
	_, err := s.conn.Write([]byte(str))
	return err
}
func (n *Newline) NewLine() string {
	return n.nl
}

func (n *Newline) Init() {
	if runtime.GOOS == "windows" {
		n.nl = "\r\n"
	} else {
		n.nl = "\n"
	}
}
